
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super-admin';
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isCoach() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if the currently authenticated user is the coach of the user with `userId`
    function isTheirCoach(userId) {
      let clientProfile = get(/databases/$(database)/documents/users/$(userId)).data;
      return clientProfile.coachId == request.auth.uid;
    }

    match /users/{userId} {
      // CREATE: Allow anyone to create a user doc for themselves upon signup.
      allow create: if isSignedIn() && isOwner(userId);

      // READ: 
      // 1. Admins/Super Admins can read any user profile.
      // 2. Any signed-in user can read any 'coach' profile (for selection dropdowns).
      // 3. A coach can read the profiles of their own clients.
      // 4. Any user can read their own profile.
      allow read: if isAdmin() || isSuperAdmin() ||
                   get(/databases/$(database)/documents/users/$(userId)).data.role == 'coach' ||
                   (isCoach() && isTheirCoach(userId)) ||
                   isOwner(userId);
                   
      // UPDATE: 
      // 1. Admins/Super Admins can update any user.
      // 2. A client can update their own coachId.
      // 3. A user can update their own profile (but not their role).
      allow update: if (isAdmin() || isSuperAdmin()) ||
                     (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['coachId', 'updatedAt', 'displayName', 'photoURL'])) ||
                     (isOwner(userId) && !('role' in request.resource.data.diff(resource.data).affectedKeys()));

      // DELETE: Only Admins can delete users.
      allow delete: if isAdmin() || isSuperAdmin();
    }

    match /sessions/{sessionId} {
      // CREATE: Coaches can create sessions. Admins can create sessions (e.g., for dummy data).
      allow create: if isCoach() || isAdmin() || isSuperAdmin();

      // READ:
      // 1. Admins/Super Admins can read all sessions.
      // 2. A coach can read sessions they created OR sessions for one of their clients.
      // 3. A client can read their own sessions.
      allow read: if isAdmin() || isSuperAdmin() || 
                   (isCoach() && resource.data.coachId == request.auth.uid) ||
                   (isCoach() && isTheirCoach(resource.data.clientId)) ||
                   (resource.data.clientId == request.auth.uid);

      // UPDATE: 
      // 1. Admins/Super Admins can update any session.
      // 2. A coach can update a session they created.
      allow update: if isAdmin() || isSuperAdmin() || 
                     (isCoach() && resource.data.coachId == request.auth.uid);
                     
      // DELETE: Only Admins can delete sessions.
      allow delete: if isAdmin() || isSuperAdmin();
    }
  }
}
