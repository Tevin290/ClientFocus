rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function getUserCompany() {
      return getUserData().companyId;
    }
    
    function getUserRole() {
      return getUserData().role;
    }
    
    function isInSameCompany(targetCompanyId) {
      return isAuthenticated() && getUserCompany() == targetCompanyId;
    }
    
    function isAdmin() {
      return getUserRole() in ['admin', 'super-admin'];
    }
    
    function isSuperAdmin() {
      return getUserRole() == 'super-admin';
    }
    
    function isCoach() {
      return getUserRole() == 'coach';
    }
    
    function isClient() {
      return getUserRole() == 'client';
    }
    
    // Users collection - Company-scoped access
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can only update their own profile (but not change role or violate business rules)
      allow update: if isAuthenticated() && request.auth.uid == userId && 
        resource.data.role == request.resource.data.role &&
        // Allow client updates (coach assignment handled by admin)
        true &&
        // Ensure coaches/admins still have a company after update
        (request.resource.data.role == 'client' || 
         (request.resource.data.role in ['coach', 'admin'] && 
          request.resource.data.companyId != null &&
          exists(/databases/$(database)/documents/companies/$(request.resource.data.companyId))));
      
      // Allow create for new users during signup with business rule validation
      allow create: if isAuthenticated() && 
        request.resource.data.role != 'super-admin' &&
        // Clients must have a coach assigned during signup
        (request.resource.data.role != 'client' || 
         (request.resource.data.role == 'client' && 
          request.resource.data.coachId != null &&
          exists(/databases/$(database)/documents/users/$(request.resource.data.coachId)))) &&
        // Coaches and admins must belong to a company  
        (request.resource.data.role == 'client' || 
         (request.resource.data.role in ['coach', 'admin'] && 
          request.resource.data.companyId != null &&
          exists(/databases/$(database)/documents/companies/$(request.resource.data.companyId))));
    }
    
    // Allow company-scoped user queries
    match /users/{document=**} {
      allow read: if (
        // Authenticated users with proper roles
        (isAuthenticated() && (
          isSuperAdmin() ||
          isAdmin() ||
          isCoach() ||
          isClient()
        )) ||
        // Unauthenticated users can query users (but individual doc access is restricted to coaches only)
        request.auth == null
      );
    }
    
    // Companies collection - Restricted access
    match /companies/{companyId} {
      // Allow public access to company data for white-label landing pages
      allow read: if request.auth == null;
      
      // Allow any authenticated user to read company data (for white-label pages)
      allow read: if isAuthenticated();
      
      // Specific access for company members and super-admins (redundant but explicit)
      allow read: if isAuthenticated() && (
        isSuperAdmin() || 
        // Direct company access - avoid circular dependency with getUserData()
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId
      );
      
      // Only super-admins (platform admins) can create companies
      allow create: if isAuthenticated() && isSuperAdmin();
      
      // Super-admins can modify any company, company admins can modify their own
      allow update: if isAuthenticated() && (
        isSuperAdmin() || 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin'] && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId)
      );
      
      // Only super-admins can delete companies
      allow delete: if isAuthenticated() && isSuperAdmin();
    }
    
    // Sessions collection - Role and company-based access
    match /sessions/{sessionId} {
      // Read access based on role and company
      allow read: if isAuthenticated() && (
        // Super-admins can see all sessions across companies
        isSuperAdmin() ||
        // Company-scoped access for other roles
        (isInSameCompany(resource.data.companyId) && (
          // Admins can see all company sessions
          isAdmin() ||
          // Coaches can see their own sessions
          (isCoach() && resource.data.coachId == request.auth.uid) ||
          // Clients can see their own sessions
          (isClient() && resource.data.clientId == request.auth.uid)
        ))
      );
      
      // Write access - only coaches and admins
      allow create: if isAuthenticated() && 
        isInSameCompany(resource.data.companyId) && 
        (isCoach() || isAdmin());
        
      allow update: if isAuthenticated() && 
        isInSameCompany(resource.data.companyId) && (
          // Coaches can update their own sessions
          (isCoach() && resource.data.coachId == request.auth.uid) ||
          // Admins can update any company session
          isAdmin()
        );
        
      allow delete: if isAuthenticated() && 
        isInSameCompany(resource.data.companyId) && isAdmin();
    }
    
    // Allow querying sessions collection
    match /sessions/{document=**} {
      allow read: if isAuthenticated() && (
        // Super-admins can query all sessions
        isSuperAdmin() ||
        // Company admins can query sessions in their company
        isAdmin() ||
        // Coaches can query sessions (filtered by their own sessions in code)
        isCoach() ||
        // Clients can query sessions (filtered by their own sessions in code)
        isClient()
      );
    }
  }
}