
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get a user's role from their profile
    function getUserRole(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      if (exists(/databases/$(database)/documents/users/$(userId))) {
        return userDoc.data.role;
      }
      return null;
    }

    // USERS Collection Rules
    match /users/{userId} {
      // Allow a user to be created only during signup by that same user.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow users to read their own profile.
      // Allow admins to read any user profile.
      // Allow coaches to read the profiles of clients assigned to them.
      allow read: if request.auth != null && (
                    request.auth.uid == userId ||
                    getUserRole(request.auth.uid) in ['admin', 'super-admin'] ||
                    (getUserRole(request.auth.uid) == 'coach' && resource.data.coachId == request.auth.uid)
                  );

      // Allow users to update their own profile data (e.g., displayName, photoURL, coachId).
      // Disallow users from changing their own role.
      // Allow admins to update any part of a user's profile.
      allow update: if request.auth != null && (
                      (request.auth.uid == userId && request.resource.data.role == resource.data.role) ||
                      getUserRole(request.auth.uid) in ['admin', 'super-admin']
                    );

      // Only admins can delete user accounts.
      allow delete: if request.auth != null && getUserRole(request.auth.uid) in ['admin', 'super-admin'];
    }

    // SESSIONS Collection Rules
    match /sessions/{sessionId} {
      // Allow a coach to create a session for one of their clients.
      // The coach creating the session must be the one listed in the session document.
      allow create: if request.auth != null &&
                    getUserRole(request.auth.uid) == 'coach' &&
                    request.auth.uid == request.resource.data.coachId;

      // Allow clients to read their own sessions.
      // Allow coaches to read sessions they created.
      // Allow admins to read any session.
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.clientId ||
                    request.auth.uid == resource.data.coachId ||
                    getUserRole(request.auth.uid) in ['admin', 'super-admin']
                  );

      // Allow coaches to update sessions they created.
      // Allow admins to update sessions (e.g., for status changes).
      allow update: if request.auth != null && (
                      request.auth.uid == resource.data.coachId ||
                      getUserRole(request.auth.uid) in ['admin', 'super-admin']
                    );

      // Only admins can delete sessions.
      allow delete: if request.auth != null && getUserRole(request.auth.uid) in ['admin', 'super-admin'];
    }

    // COMPANIES Collection Rules (for multi-tenancy)
    match /companies/{companyId} {
      // Allow authenticated reads for now.
      allow read: if request.auth != null;
      // Only admins/super-admins can create or modify company documents.
      allow write: if request.auth != null && getUserRole(request.auth.uid) in ['admin', 'super-admin'];
    }
  }
}
