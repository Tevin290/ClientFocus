
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // - Authenticated users can read their own profile.
    // - Authenticated users can create their own profile (e.g., during sign-up).
    //   - Ensure the UID in the document matches their auth UID.
    //   - Ensure required fields like email and role are present.
    // - Authenticated users can update their own profile (specific fields might be restricted further).
    // - Deleting user profiles might be restricted to admins or disabled.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role in ['admin', 'coach', 'client'] &&
                       'displayName' in request.resource.data &&
                       request.resource.data.createdAt == request.time;
      allow update: if request.auth != null && request.auth.uid == userId;
      // allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Example: only admins can delete
    }

    // Sessions Collection
    // These are very basic. You'll need to refine these based on your app's logic.
    // - Who can create sessions? (Likely coaches)
    // - Who can read sessions? (Clients their own, coaches their own, admins all?)
    // - Who can update sessions? (Coaches their own, admins all?)
    match /sessions/{sessionId} {
      allow read: if request.auth != null; // Placeholder: Allows any authenticated user to read any session. REFINE THIS.
      // Example: Client can read their own sessions
      // allow read: if request.auth != null && resource.data.clientId == request.auth.uid;
      // Example: Coach can read sessions they created
      // allow read: if request.auth != null && resource.data.coachId == request.auth.uid;
      // Example: Admin can read any session
      // allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      allow create: if request.auth != null; // Placeholder: Allows any authenticated user to create sessions. REFINE THIS.
      // Example: Only coaches can create sessions
      // allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' &&
      //                  request.resource.data.coachId == request.auth.uid;


      allow update: if request.auth != null; // Placeholder: Allows any authenticated user to update. REFINE THIS.
      // Example: Only coaches who created the session or admins can update
      // allow update: if request.auth != null &&
      //                  (resource.data.coachId == request.auth.uid ||
      //                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Example: Only admins can delete
    }

    // You might add other collections here (e.g., appSettings for Stripe keys if stored in Firestore)
    // match /appSettings/{settingsId} {
    //   allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    //   allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    // }
  }
}
