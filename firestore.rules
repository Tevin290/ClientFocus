
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // - Authenticated users can create their own profile.
    // - Document ID must match the authenticated user's UID.
    // - Data being written must match expected structure (uid, email, role, displayName, createdAt).
    // - Email domain validation for admin/coach roles.
    // - Authenticated users can read their own profile.
    // - Authenticated users can update their own displayName, photoURL. (Role, email, uid, createdAt should be immutable or admin-only).
    // - Admins can read/write any user profile (useful for user management).
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      allow create: if request.auth != null && request.auth.uid == userId &&
                  request.resource.data.uid == request.auth.uid &&
                  request.resource.data.email == request.auth.token.email && // Ensure email matches token
                  request.resource.data.role in ['admin', 'coach', 'client'] &&
                  (request.resource.data.role == 'admin' || request.resource.data.role == 'coach' ? request.resource.data.email.matches('.*@hmperform\\.com$') : true) &&
                  request.resource.data.displayName is string &&
                  request.resource.data.size() >= 4 && request.resource.data.size() <= 8 && // uid, email, displayName, role, createdAt are base + optionals
                  (!('photoURL' in request.resource.data) || request.resource.data.photoURL is string) &&
                  (!('coachId' in request.resource.data) || request.resource.data.coachId is string) &&
                  (!('stripeCustomerId' in request.resource.data) || request.resource.data.stripeCustomerId is string) &&
                  request.resource.data.createdAt == request.time; // Ensure createdAt is set by the server

      allow update: if request.auth != null && 
                  ( (request.auth.uid == userId && 
                    request.resource.data.uid == request.auth.uid && // uid cannot change
                    request.resource.data.email == resource.data.email && // email cannot change by user
                    request.resource.data.role == resource.data.role && // role cannot change by user
                    request.resource.data.createdAt == resource.data.createdAt && // createdAt cannot change
                    (!('photoURL' in request.resource.data) || request.resource.data.photoURL is string) &&
                    (!('displayName' in request.resource.data) || request.resource.data.displayName is string) &&
                    (!('coachId' in request.resource.data) || request.resource.data.coachId is string) && // coachId might be updatable by admin or specific logic
                    (!('stripeCustomerId' in request.resource.data) || request.resource.data.stripeCustomerId is string) &&
                    (request.resource.data.keys().hasOnly(['uid', 'email', 'displayName', 'role', 'photoURL', 'createdAt', 'coachId', 'stripeCustomerId'])) // Only allow these fields
                  ) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ); // Admin can update anything
      
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can delete users
    }

    // Sessions Collection
    // - Coaches can create sessions. (Ensure coachId matches auth.uid)
    // - Clients can read sessions where their clientId matches auth.uid.
    // - Coaches can read sessions where their coachId matches auth.uid.
    // - Admins can read/write all sessions.
    // - Coaches can update sessions they created (e.g. status, notes) but perhaps not client/coach IDs.
    match /sessions/{sessionId} {
      allow read: if request.auth != null && 
                  (resource.data.clientId == request.auth.uid || 
                   resource.data.coachId == request.auth.uid ||
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      allow create: if request.auth != null && 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' &&
                   request.resource.data.coachId == request.auth.uid &&
                   request.resource.data.createdAt == request.time &&
                   request.resource.data.updatedAt == request.time;
                   // Add more checks for required fields (clientName, sessionDate, type, notes, status etc.)

      allow update: if request.auth != null &&
                  ( (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' &&
                     resource.data.coachId == request.auth.uid && // Coach can only update their own sessions
                     request.resource.data.updatedAt == request.time
                     // Add field-level restrictions: e.g., coach cannot change clientId once set
                  ) ||
                    (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                     request.resource.data.updatedAt == request.time 
                    ) // Admin can update any session
                  );
      
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can delete sessions
    }

    // AppSettings Collection (Example for Stripe keys, etc.)
    // - Only admins should be able to read/write these settings.
    match /appSettings/{settingId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
