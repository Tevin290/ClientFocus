
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // Users Collection
    match /users/{userId} {
      // Allow create:
      // 1. User must be authenticated.
      // 2. The UID in the document being created must match the authenticated user's UID.
      // THIS IS VERY LENIENT FOR TESTING SIGN-UP
      allow create: if isAuthenticated() &&
                       request.resource.data.uid == request.auth.uid;

      // Allow read: User can read their own profile.
      allow read: if isAuthenticated() && request.auth.uid == userId;

      // Allow update: User can update their own profile.
      // (Does not prevent role change by user themselves in this version for simplicity, can be added)
      allow update: if isAuthenticated() && request.auth.uid == userId;

      // Disallow delete for now.
      allow delete: if false;
    }

    // Sessions Collection
    match /sessions/{sessionId} {
      // Helper function to get the role of the currently authenticated user
      // Returns the role string or null if not found or no role field
      function authedUserRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      }

      function isAuthedUserCoach() {
        return authedUserRole() == 'coach';
      }

      function isAuthedUserClient() {
        return authedUserRole() == 'client';
      }

      function isAuthedUserAdmin() {
        return authedUserRole() == 'admin';
      }

      // Check if the authenticated user is the coach assigned to THIS session (for read/update of existing doc)
      function isCoachOfThisSession() {
        // resource.data refers to the existing document in Firestore
        return isAuthedUserCoach() && resource.data.coachId == request.auth.uid;
      }

      // Check if the authenticated user is the client assigned to THIS session (for read/update of existing doc)
      function isClientOfThisSession() {
        // resource.data refers to the existing document in Firestore
        return isAuthedUserClient() && resource.data.clientId == request.auth.uid;
      }

      // Allow create:
      // - Authenticated coach can create a session.
      // - coachId in the new sessionData (request.resource.data) must match the authenticated coach's UID.
      allow create: if isAuthenticated() &&
                       isAuthedUserCoach() &&
                       request.resource.data.coachId == request.auth.uid;

      // Allow read:
      // - Admin can read all sessions.
      // - Coach can read sessions they created (coachId in doc matches their uid).
      // - Client can read sessions where they are the client (clientId in doc matches their uid).
      allow read: if isAuthenticated() &&
                     (isAuthedUserAdmin() || isCoachOfThisSession() || isClientOfThisSession());

      // Allow update:
      // - Admin can update sessions.
      // - Coach can update sessions they created, e.g., if status is 'Logged'.
      allow update: if isAuthenticated() &&
                       (
                         isAuthedUserAdmin() ||
                         (isCoachOfThisSession() && resource.data.status == 'Logged')
                       );
      // Allow delete:
      // - Admin can delete.
      allow delete: if isAuthenticated() && isAuthedUserAdmin();
    }
  }
}
