
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to determine role based on email
    function getRole(email) {
      let adminEmails = string(resource.data.get('NEXT_PUBLIC_ADMIN_EMAILS', 'hello@hmperform.com')).split(',');
      if (email.matches('.*@hmperform\\.com$')) {
        if (email in adminEmails) {
          return 'admin';
        }
        return 'coach';
      }
      return 'client';
    }

    // Users Collection
    match /users/{userId} {
      // EXTREME DIAGNOSTIC CREATE RULE:
      // Allow create if user is authenticated, userId matches their auth.uid,
      // and the document contains 'diagnosticMarker' set to true and 'createdAt' is a timestamp.
      allow create: if request.auth.uid != null &&
                     request.auth.uid == userId &&
                     request.resource.data.containsKey('diagnosticMarker') &&
                     request.resource.data.diagnosticMarker == true &&
                     request.resource.data.createdAt is timestamp;

      allow read: if request.auth.uid != null && request.auth.uid == userId;
      allow update: if request.auth.uid != null && request.auth.uid == userId;
      // Admins can manage any user profile (be cautious with this in production)
      // allow read, update, delete: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can delete
    }

    // Sessions Collection
    match /sessions/{sessionId} {
      allow create: if request.auth.uid != null && 
                       request.resource.data.coachId == request.auth.uid && // Coach creating session must be the authenticated user
                       request.resource.data.status == 'Logged' && // Initial status must be Logged
                       request.resource.data.sessionDate is timestamp &&
                       request.resource.data.createdAt is timestamp &&
                       request.resource.data.updatedAt is timestamp &&
                       request.resource.data.coachId is string &&
                       request.resource.data.coachName is string &&
                       request.resource.data.clientId is string &&
                       request.resource.data.clientName is string &&
                       request.resource.data.clientEmail is string &&
                       request.resource.data.sessionType in ['Full', 'Half'] &&
                       request.resource.data.sessionNotes is string &&
                       (!request.resource.data.containsKey('summary') || request.resource.data.summary is string) &&
                       (!request.resource.data.containsKey('videoLink') || request.resource.data.videoLink is string);
                       
      allow read: if request.auth.uid != null && 
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || // Admin can read any session
                      resource.data.coachId == request.auth.uid || // Coach can read their own sessions
                      resource.data.clientId == request.auth.uid);   // Client can read their own sessions

      allow update: if request.auth.uid != null &&
                       (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || // Admin can update any session (e.g., status)
                        (resource.data.coachId == request.auth.uid && request.resource.data.status == resource.data.status)); // Coach can update their session if status isn't changing (e.g. notes)
                        // More granular checks for specific fields might be needed for coaches (e.g., coach cannot change status once logged)
                        // For admin updates on status:
                        // Ensure only valid status transitions. For example:
                        //   (request.resource.data.status in ['Reviewed', 'Billed'] && resource.data.status == 'Logged') ||
                        //   (request.resource.data.status == 'Billed' && resource.data.status == 'Reviewed')


      allow delete: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can delete sessions
    }

    // AppSettings Collection (Example for Stripe keys, if stored in Firestore)
    // match /appSettings/{settingId} {
    //   allow read: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    //   allow write: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    // }
  }
}

    