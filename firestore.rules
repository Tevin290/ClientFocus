
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // Users Collection
    match /users/{userId} {
      // VERY LENIENT CREATE RULE FOR DEBUGGING:
      // Allow create if the user is authenticated AND
      // the 'uid' field in the document being created matches the authenticated user's UID.
      // This removes checks on email matching and role for the create operation for now.
      allow create: if isAuthenticated() &&
                       request.resource.data.uid == request.auth.uid;

      // Read and Update rules (users can only access their own document)
      // Users cannot change their own role.
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId && request.resource.data.role == resource.data.role;


      // Generally, disallow delete for user profiles.
      allow delete: if false; // Or: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Sessions Collection
    match /sessions/{sessionId} {
      // Helper function to get the role of the currently authenticated user
      // Assumes the user document exists and they can read it.
      function getUserRoleFromFirestore() {
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
        // Check if userDoc and userDoc.data exist before accessing .role
        if (userDoc != null && userDoc.data != null) {
          return userDoc.data.role;
        }
        return null; // Return null if user document or data doesn't exist
      }

      function isSessionCoach() {
        return getUserRoleFromFirestore() == 'coach' && resource.data.coachId == request.auth.uid;
      }
      function isSessionClient() {
        return getUserRoleFromFirestore() == 'client' && resource.data.clientId == request.auth.uid;
      }
      function isAdmin() {
        return getUserRoleFromFirestore() == 'admin';
      }

      // Allow create:
      // - Authenticated coach can create a session for themselves.
      allow create: if isAuthenticated() &&
                       getUserRoleFromFirestore() == 'coach' &&
                       request.resource.data.coachId == request.auth.uid;

      // Allow read:
      // - Admin, the session's coach, or the session's client can read.
      allow read: if isAuthenticated() &&
                     (isAdmin() || isSessionCoach() || isSessionClient());

      // Allow update:
      // - Admin can update.
      // - The session's coach can update (e.g., if status is 'Logged').
      allow update: if isAuthenticated() &&
                       (isAdmin() || (isSessionCoach() && resource.data.status == 'Logged'));

      // Allow delete:
      // - Admin can delete.
      allow delete: if isAuthenticated() && isAdmin();
    }
  }
}
