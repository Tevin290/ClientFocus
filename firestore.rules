
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    match /users/{userId} {
      // Allow create only if the user is authenticated, the userId matches their auth uid,
      // and the document contains the diagnosticMarker and createdAt fields.
      // This is an EXTREME DIAGNOSTIC RULE.
      allow create: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.containsKey('diagnosticMarker') &&
                       request.resource.data.diagnosticMarker == true &&
                       request.resource.data.containsKey('createdAt') &&
                       request.resource.data.createdAt is timestamp;

      // Allow read if the user is authenticated and is requesting their own document.
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow update if the user is authenticated and is updating their own document.
      // For now, this is a general update rule. Specific field validations can be added.
      allow update: if request.auth != null && request.auth.uid == userId;

      // Generally, disallow delete for user profiles unless explicitly needed.
      allow delete: if false;
    }

    // Sessions Collection
    match /sessions/{sessionId} {
      // Allow create if user is authenticated and is a coach, and required fields are present.
      allow create: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' &&
                       request.resource.data.coachId == request.auth.uid &&
                       request.resource.data.containsKey('clientName') &&
                       request.resource.data.containsKey('clientEmail') &&
                       request.resource.data.containsKey('sessionDate') &&
                       request.resource.data.sessionDate is timestamp &&
                       request.resource.data.containsKey('sessionType') &&
                       request.resource.data.containsKey('sessionNotes') &&
                       request.resource.data.containsKey('status') &&
                       (request.resource.data.status == 'Logged' || request.resource.data.status == 'Reviewed' || request.resource.data.status == 'Billed');


      // Allow read:
      // 1. Admin can read any session.
      // 2. Coach can read sessions they created.
      // 3. Client can read their own sessions.
      allow read: if request.auth != null &&
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' && resource.data.coachId == request.auth.uid) ||
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'client' && resource.data.clientId == request.auth.uid));

      // Allow update:
      // 1. Admin can update any session (e.g., status).
      // 2. Coach can update sessions they created (e.g., notes, videoLink, status before billing).
      // Ensure coaches cannot change status to 'Billed' directly unless logic allows.
      // For now, allow coach to update if it's their session, admin can update anything.
      allow update: if request.auth != null &&
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                       (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' &&
                        resource.data.coachId == request.auth.uid &&
                        // Optional: Prevent coach from changing status once Billed if that's a business rule
                        (resource.data.status != 'Billed' || request.resource.data.status == resource.data.status )
                       )
                      );

      // Generally, disallow delete for sessions unless explicitly needed by an admin.
      allow delete: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
    