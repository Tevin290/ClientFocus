
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isSelf(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getUserRole(uid) {
      // Use exists() to prevent errors on new user creation before their doc is written.
      return exists(/databases/$(database)/documents/users/$(uid))
        ? get(/databases/$(database)/documents/users/$(uid)).data.role
        : '';
    }

    function isAdmin() {
      return isAuth() && getUserRole(request.auth.uid) == 'admin';
    }
    
    function isCoach() {
      return isAuth() && getUserRole(request.auth.uid) == 'coach';
    }

    function isCoachOwner(sessionData) {
      return isAuth() && sessionData.coachId == request.auth.uid;
    }
    
    function isClientOwner(sessionData) {
      return isAuth() && sessionData.clientId == request.auth.uid;
    }

    // This function checks that the role being assigned in a new user document
    // is consistent with that user's email address. This prevents a user from
    // creating an account with a non-company email and assigning themselves 'coach'.
    function isValidRoleAssignment(userData) {
      let email = userData.email.toLowerCase();
      let isCompanyEmail = email.matches('.*@hmperform\\.com$');
      
      // Use a fixed list for admin emails for security.
      // To add more, you would add them to this list.
      let adminEmails = ['hello@hmperform.com'];
      let isAdminByEmail = email in adminEmails;
      
      return (userData.role == 'admin' && isAdminByEmail) ||
             (userData.role == 'coach' && isCompanyEmail && !isAdminByEmail) ||
             (userData.role == 'client' && !isCompanyEmail);
    }
    
    // USERS collection rules
    match /users/{userId} {
      // Allow creation if a user is creating their own doc with a valid role, OR if the request is from an admin.
      allow create: if (isSelf(userId) && isValidRoleAssignment(request.resource.data)) || isAdmin();

      // Allow read if a user is reading their own doc, OR if the request is from an admin.
      allow read: if isSelf(userId) || isAdmin();
      
      // Only admins can list all users.
      allow list: if isAdmin();

      // Allow update if a user is updating their own doc (but not their role), OR if the request is from an admin.
      allow update: if (isSelf(userId) && request.resource.data.role == resource.data.role) || isAdmin();
      
      // Only admins can delete users.
      allow delete: if isAdmin();
    }

    // SESSIONS collection rules
    match /sessions/{sessionId} {
      // Allow creation if the user is a coach and owns the session, OR if the request is from an admin.
      allow create: if (isCoach() && isCoachOwner(request.resource.data)) || isAdmin();
      
      // Allow read if the user owns the session (as coach or client), OR if the request is from an admin.
      allow read: if isCoachOwner(resource.data) || isClientOwner(resource.data) || isAdmin();
      
      // Allow update if the user is the coach owner, OR if the request is from an admin.
      allow update: if isCoachOwner(resource.data) || isAdmin();
      
      // Only admins can delete sessions.
      allow delete: if isAdmin();
    }
  }
}
