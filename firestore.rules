
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Safely get user data for rule checks. Returns a default if doc doesn't exist.
    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isUserRole(role) {
        let userRole = getUserData(request.auth.uid).role;
        return isSignedIn() && userRole == role;
    }

    function isSuperAdmin() { return isUserRole('super-admin'); }
    function isAdmin() { return isUserRole('admin') || isSuperAdmin(); }
    function isCoach() { return isUserRole('coach'); }
    function isClient() { return isUserRole('client'); }

    // Checks if the user being accessed is a client of the requesting coach.
    function isMyClient(clientDoc) {
      return isSignedIn()
             && isCoach()
             && clientDoc.data.role == 'client'
             && clientDoc.data.coachId == request.auth.uid
             && clientDoc.data.companyId == getUserData(request.auth.uid).companyId;
    }

    // Checks if the requesting user is the coach of the user being accessed.
    function isMyCoach(coachDoc) {
      return isSignedIn()
             && isClient()
             && coachDoc.data.role == 'coach'
             && getUserData(request.auth.uid).coachId == coachDoc.id
             && coachDoc.data.companyId == getUserData(request.auth.uid).companyId;
    }
    
    function isSameCompanyAsRequestor(docData) {
       return docData.companyId == getUserData(request.auth.uid).companyId;
    }


    // Collection: companies
    match /companies/{companyId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Collection: users
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;

      allow read: if isUser(userId) 
                  || (isAdmin() && isSameCompanyAsRequestor(resource.data))
                  || isMyClient(resource)
                  || isMyCoach(resource);

      allow update: if isUser(userId) 
                    || (isAdmin() && isSameCompanyAsRequestor(resource.data));
                    
      allow delete: if isAdmin();
    }

    // Collection: sessions
    match /sessions/{sessionId} {
      allow create: if (isCoach() && request.resource.data.coachId == request.auth.uid) || isAdmin();
      
      allow read, update: if (isCoach() && resource.data.coachId == request.auth.uid && isSameCompanyAsRequestor(resource.data))
                   || (isClient() && resource.data.clientId == request.auth.uid && isSameCompanyAsRequestor(resource.data))
                   || (isAdmin() && isSameCompanyAsRequestor(resource.data));
                   
      allow delete: if isAdmin();
    }
  }
}
