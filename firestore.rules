
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSignedIn() {
      return request.auth.uid != null;
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isRole(userId, roleName) {
      return isSignedIn() && getRole(userId) == roleName;
    }

    match /users/{userId} {
      // CREATE:
      // Allow any authenticated user to create their OWN user document,
      // as long as the 'uid' field in the document matches their auth UID.
      // The role can be set to anything during creation by this rule.
      allow create: if isSignedIn() &&
                       request.resource.data.uid == request.auth.uid;

      // READ:
      // Allow user to read their own profile.
      // Allow admin to read any user profile.
      allow read: if isSignedIn() && 
                     (isOwner(userId) || isRole(request.auth.uid, 'admin'));
      
      // UPDATE:
      // Allow user to update their own profile, but not change their role or UID.
      // Allow admin to update any user profile (including role).
      allow update: if isSignedIn() &&
                       ((isOwner(userId) && 
                         request.resource.data.uid == resource.data.uid && // UID cannot be changed
                         request.resource.data.role == resource.data.role) || // Role cannot be changed by non-admin
                        isRole(request.auth.uid, 'admin')); 
                        // Admin can change anything, including role. UID is immutable by nature of path.

      // DELETE: Generally disallow deletion. Admin might be an exception if needed.
      allow delete: if false; 
    }

    match /sessions/{sessionId} {
      // Session data being created
      function isSessionCreator() {
        return request.auth.uid == request.resource.data.coachId;
      }

      // Existing session data
      function isSessionCoach() {
        return request.auth.uid == resource.data.coachId;
      }

      function isSessionClient() {
        return request.auth.uid == resource.data.clientId;
      }
      
      allow create: if isSignedIn() && isSessionCreator();

      allow read: if isSignedIn() && 
                     (isSessionCoach() || 
                      isSessionClient() || 
                      isRole(request.auth.uid, 'admin'));
      
      allow update: if isSignedIn() && 
                       (isSessionCoach() || isRole(request.auth.uid, 'admin'));
      
      allow delete: if isSignedIn() && 
                       (isSessionCoach() || isRole(request.auth.uid, 'admin'));
    }
  }
}
