
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ──────────────── USERS COLLECTION ──────────────── */
    match /users/{userId} {

      // ── CREATE ──
      //  • Authenticated user only
      //  • Doc ID must equal auth.uid
      //  • DIAGNOSTIC: Simplified required keys for testing stack overflow
      //  • Role rules:
      //      - 'client' -> always allowed (if email verified)
      //      - 'coach' | 'admin' -> only if email ends with @hmperform.com (and email verified)
      allow create: if request.auth != null
                    && userId == request.auth.uid
                    && request.auth.token.email_verified == true
                    && (
                         request.resource.data.role == 'client'
                         || (
                              (request.resource.data.role in ['coach', 'admin'])
                              && request.auth.token.email.matches('.*@hmperform\\.com$')
                         )
                       )
                    // DIAGNOSTIC: Minimal required keys
                    && request.resource.data.keys().hasAll(['email', 'role', 'createdAt']);


      // ── READ ──
      //  • User may read their own document
      //  • Admin may read any user document
      allow read: if request.auth != null
                  && (
                    userId == request.auth.uid
                    || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                  );

      // ── UPDATE ──
      //  • User may update their own document
      //  • Cannot change role, email, or createdAt. UID is immutable (doc ID).
      //  • Admin may update any user document (e.g., to assign a coachId, change role)
      allow update: if request.auth != null
                    && (
                      ( // User updating their own
                        userId == request.auth.uid
                        && request.resource.data.role      == resource.data.role
                        && request.resource.data.email     == resource.data.email
                        && request.resource.data.createdAt == resource.data.createdAt
                        // Allow displayName and photoURL to be changed by user
                      ) || ( // Admin updating any user
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                        // Admin cannot change createdAt for existing doc (usually)
                        && request.resource.data.createdAt == resource.data.createdAt
                      )
                    );

      // ── DELETE ──
      //  • Client-side deletion not allowed for now. Admins could be allowed via a function.
      allow delete: if false;
    }

    /* ──────────────── SESSIONS COLLECTION ──────────────── */
    match /sessions/{sessionId} {
      // Coach can create sessions for their clients
      allow create: if request.auth != null
                    && request.resource.data.coachId == request.auth.uid;
                    // Additional checks: client exists, etc.

      // Coach can read their own sessions. Client can read their own sessions. Admin can read all.
      allow read: if request.auth != null &&
                  (
                    resource.data.coachId == request.auth.uid ||
                    resource.data.clientId == request.auth.uid ||
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                  );

      // Coach can update their own sessions (if not billed). Admin can update any session.
      allow update: if request.auth != null &&
                  (
                    (resource.data.coachId == request.auth.uid && resource.data.status != 'Billed') ||
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                  );
      
      allow delete: if false; // Or admin only
    }

    /* ──────────────── APP SETTINGS DOCS ──────────────── */
    match /appSettings/{settingsId} {
      // Any signed-in user can read app settings
      allow read: if request.auth != null;

      // Only admins may write
      allow write: if request.auth != null
                   && get(/databases/$(database)/documents/users/$(request.auth.uid))
                        .data.role == 'admin';
    }
  }
}
