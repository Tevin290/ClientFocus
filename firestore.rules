
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions to make rules reusable and readable
    function isAuth() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAdmin() {
      return isAuth() && getRole(request.auth.uid) == 'admin';
    }

    // Admins have "god mode" - full read, write, and delete access to everything.
    match /{document=**} {
      allow read, write, delete: if isAdmin();
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow a user to read their own profile.
      // Allow a coach to read the profile of a client assigned to them.
      allow read: if isUser(userId) || (isAuth() && getRole(request.auth.uid) == 'coach' && resource.data.coachId == request.auth.uid);

      // Anyone can create a user document (required for public signup).
      allow create: if true;

      // A user can update their own profile, but they cannot change their role.
      allow update: if isUser(userId) && request.resource.data.role == resource.data.role;

      // Deleting users is handled by the global admin rule.
    }

    // Rules for the 'sessions' collection
    match /sessions/{sessionId} {
      // A client can read their own sessions.
      // A coach can read sessions belonging to their assigned clients.
      allow read: if isAuth() && (
        request.auth.uid == resource.data.clientId || 
        (getRole(request.auth.uid) == 'coach' && get(/databases/$(database)/documents/users/$(resource.data.clientId)).data.coachId == request.auth.uid)
      );

      // A coach can create a session for one of their assigned clients.
      // The session data must correctly list the coach creating it.
      allow create: if isAuth() && 
                      getRole(request.auth.uid) == 'coach' && 
                      request.resource.data.coachId == request.auth.uid &&
                      get(/databases/$(database)/documents/users/$(request.resource.data.clientId)).data.coachId == request.auth.uid;
      
      // A coach can update a session they created.
      allow update: if isAuth() && request.auth.uid == resource.data.coachId;

      // Deleting sessions is handled by the global admin rule.
    }
  }
}
