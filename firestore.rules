
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // - Authenticated users can create their own profile.
    // - Authenticated users can read their own profile.
    // - Authenticated users can update their own profile (e.g., displayName, photoURL).
    // - Deletes are typically restricted (admin-only or handled by backend functions).
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId
                      && request.resource.data.uid == userId
                      && request.resource.data.email == request.auth.token.email
                      && request.resource.data.role in ['admin', 'coach', 'client']
                      && (request.resource.data.role != 'admin' || request.auth.token.email.endsWith('@hmperform.com'))
                      && (request.resource.data.role != 'coach' || request.auth.token.email.endsWith('@hmperform.com'))
                      && request.resource.data.containsKey('displayName')
                      && request.resource.data.displayName is string
                      && request.resource.data.displayName.size() > 0
                      && request.resource.data.containsKey('createdAt');
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Add admin delete rule if needed:
      // allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Sessions Collection
    // These are very basic. You'll need to refine them.
    // - Coaches can create sessions.
    // - Clients can read their own sessions.
    // - Coaches can read/update sessions they created.
    // - Admins can read/update/delete all sessions.
    match /sessions/{sessionId} {
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach'
                      && request.resource.data.coachId == request.auth.uid;
                      // Add more checks: clientId exists, etc.
      
      allow read: if request.auth != null && 
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' && resource.data.coachId == request.auth.uid ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'client' && resource.data.clientId == request.auth.uid);

      allow update: if request.auth != null &&
                       (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' && resource.data.coachId == request.auth.uid);
                        // Coaches should only update certain fields, admins more.

      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Placeholder for App Settings (e.g., Stripe keys) - Admin only
    match /appSettings/{settingId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
