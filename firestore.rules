rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Safely get a user's role, returning null if the user document doesn't exist.
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Safely get a user's company ID.
    function getUserCompanyId(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.companyId;
    }
    
    // Check if the requesting user is a Super Admin.
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) 
             && getUserRole(request.auth.uid) == 'super-admin';
    }

    // Check if the requesting user is an Admin or Super Admin.
    function isAdmin() {
      let role = getUserRole(request.auth.uid);
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) 
             && (role == 'admin' || role == 'super-admin');
    }

    // Check if the requesting user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if the requesting user and the resource are in the same company.
    function isInSameCompany(resourceCompanyId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) 
             && getUserCompanyId(request.auth.uid) == resourceCompanyId;
    }

    // --- Collection Rules ---

    // USERS
    // All authenticated users can create a user document (for signup).
    // Subsequent reads and updates are restricted by role and ownership.
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read: if isOwner(userId) 
                  // An admin can read any user profile within their own company.
                  || (isAdmin() && isInSameCompany(resource.data.companyId))
                  // A coach can read a client's profile if they are the assigned coach.
                  || (
                      getUserRole(request.auth.uid) == 'coach' 
                      && resource.data.coachId == request.auth.uid 
                      && isInSameCompany(resource.data.companyId)
                  );
      allow update: if isOwner(userId) || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }
    
    // SESSIONS
    // Only authenticated users within the same company can interact with sessions.
    match /sessions/{sessionId} {
      allow read: if request.auth != null && isInSameCompany(resource.data.companyId);
      allow create: if request.auth != null && isInSameCompany(request.resource.data.companyId);
      allow update: if request.auth != null && isInSameCompany(resource.data.companyId) && 
                       (isAdmin() || isOwner(resource.data.coachId));
      allow delete: if isAdmin() && isInSameCompany(resource.data.companyId);
    }
    
    // COMPANIES
    // Anyone can read company info (e.g., for a public list of companies).
    // Only super admins can create, update, or delete companies.
    match /companies/{companyId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
  }
}
