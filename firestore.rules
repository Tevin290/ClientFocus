
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // - Authenticated users can create their own profile.
    // - Authenticated users can read, update, or delete their own profile.
    // - The 'uid' field in the document data must match the authenticated user's UID for creates.
    match /users/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId && request.resource.data.uid == request.auth.uid;
    }

    // Sessions Collection
    // These are basic rules and NEED TO BE REFINED based on your app's logic.
    // For example:
    // - Clients should only be able to read their own sessions.
    // - Coaches should be able to create sessions, and read/update sessions they are assigned to.
    // - Admins should have broader read access, and potentially update rights for status changes.
    match /sessions/{sessionId} {
      // Allow logged-in users to read sessions (placeholder - too permissive for production)
      allow read: if request.auth != null;

      // Allow coaches to create sessions
      // Ensure the coachId in the document matches the authenticated user's UID
      // and that the role of the user creating it is 'coach' (fetch user profile to verify role server-side if needed via functions, or trust client for now with strict client-side validation)
      allow create: if request.auth != null && request.resource.data.coachId == request.auth.uid;
      // Allow coaches or admins to update sessions (e.g., status changes by admin)
      // This needs to be more granular.
      allow update: if request.auth != null && (request.resource.data.coachId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');


      // Generally, don't allow client-side deletes of sessions without specific logic.
      allow delete: if false; // Or restrict to admin/coach under certain conditions
    }

    // Example for appSettings (if you implement it)
    // match /appSettings/{settingId} {
    //   allow read: if true; // Publicly readable settings
    //   allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can write
    // }

    // Fallback rule: Deny all other access to prevent unintended access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
