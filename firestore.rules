
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check email domain (kept for session rules)
    function isHmPerformEmail() {
      return request.auth.token.email != null && request.auth.token.email.matches('.*@hmperform\\.com$');
    }

    // Users Collection
    match /users/{userId} {
      // VERY LENIENT CREATE RULE:
      // User must be authenticated.
      // The UID in the document being created MUST match the authenticated user's UID.
      // The email in the document being created MUST match the authenticated user's email.
      // No other restrictions on role or email domain for create.
      allow create: if isAuthenticated() &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email;

      // Allow read, update: User can read/update their own profile.
      // Disallow role changes by the user themselves via update.
      allow read: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.role == resource.data.role; // Prevent role change

      allow delete: if false; // Generally, disallow delete for user profiles
    }

    // Sessions Collection
    match /sessions/{sessionId} {
      // Helper: Get user's role from their profile document
      function getUserRole() {
        // Ensure request.auth.uid is not null before using it in a get() path
        if (request.auth == null || request.auth.uid == null) {
          return null;
        }
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
        if (userDoc.data == null) {
          return null;
        }
        return userDoc.data.role;
      }

      function isSessionCoach() {
        return getUserRole() == 'coach' && resource.data.coachId == request.auth.uid;
      }
      function isSessionClient() {
        return getUserRole() == 'client' && resource.data.clientId == request.auth.uid;
      }
      function isAdmin() {
        return getUserRole() == 'admin';
      }

      allow create: if isAuthenticated() && getUserRole() == 'coach' && request.resource.data.coachId == request.auth.uid;
      allow read: if isAuthenticated() && (isAdmin() || isSessionCoach() || isSessionClient());
      allow update: if isAuthenticated() && (
                    isAdmin() ||
                    (isSessionCoach() && resource.data.status == 'Logged')
                  );
      allow delete: if isAuthenticated() && isAdmin();
    }
  }
}
