
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ──────────────── USERS COLLECTION ──────────────── */
    match /users/{userId} {

      // ── CREATE ──
      //  • Authenticated user only
      //  • Doc ID must equal auth.uid
      //  • Email in document must match auth token email
      //  • Role rules:
      //      - 'client' → always allowed
      //      - 'coach' | 'admin' → only if email ends with @hmperform.com
      //  • Required keys: email, displayName, role, createdAt
      allow create: if request.auth != null
                    && userId == request.auth.uid
                    && request.resource.data.email == request.auth.token.email
                    && (
                         request.resource.data.role == 'client'
                         || (
                              (request.resource.data.role in ['coach', 'admin'])
                              && request.auth.token.email.matches('.*@hmperform\\.com$')
                         )
                       )
                    && request.resource.data.keys()
                         .hasAll(['email', 'displayName', 'role', 'createdAt']);

      // ── READ ──
      //  • User may read their own document
      allow read: if request.auth != null
                  && userId == request.auth.uid;

      // ── UPDATE ──
      //  • User may update their own document
      //  • Cannot change role, email, or createdAt directly by client
      //  (UID is not in the data, so no check for it here)
      allow update: if request.auth != null
                    && userId == request.auth.uid
                    && request.resource.data.role      == resource.data.role
                    && request.resource.data.email     == resource.data.email
                    && request.resource.data.createdAt == resource.data.createdAt;
                    // Note: If displayName is the only mutable field by user, you might restrict further.
                    // Example: allow update: if request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL']);


      // ── DELETE ──
      //  • Client-side deletion not allowed
      allow delete: if false;
    }

    /* ──────────────── SESSIONS COLLECTION ──────────────── */
    // Adjust later with finer-grained coach / client logic
    match /sessions/{sessionId} {
      allow read, write: if request.auth != null;
    }

    /* ──────────────── APP SETTINGS DOCS ──────────────── */
    match /appSettings/{settingsId} {
      // Any signed-in user can read app settings
      allow read: if request.auth != null;

      // Only admins may write
      allow write: if request.auth != null
                   && get(/databases/$(database)/documents/users/$(request.auth.uid))
                        .data.role == 'admin';
    }
  }
}
