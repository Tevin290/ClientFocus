rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // Allow a user to CREATE their own profile document if:
      // 1. They are authenticated (request.auth.uid is not null).
      // 2. The document ID ({userId}) they are creating matches their authenticated UID.
      // 3. The 'uid' field within the document data also matches their authenticated UID.
      // 4. The 'email' field within the document data matches their authenticated email.
      // 5. Role assignment is valid:
      //    - 'client' role is always allowed.
      //    - 'coach' or 'admin' roles are only allowed if the authenticated email is from '@hmperform.com'.
      // 6. All required fields ('uid', 'email', 'displayName', 'role', 'createdAt') are present.
      allow create: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       (
                         request.resource.data.role == 'client' ||
                         (
                           (request.resource.data.role == 'coach' || request.resource.data.role == 'admin') &&
                           request.auth.token.email.matches('.*@hmperform\\.com$')
                         )
                       ) &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'role', 'createdAt']);

      // Allow a user to READ their own profile document if:
      // 1. They are authenticated (request.auth.uid is not null).
      // 2. The document ID ({userId}) they are trying to read matches their authenticated UID.
      allow read: if request.auth.uid != null &&
                     request.auth.uid == userId;

      // Allow a user to UPDATE their own profile document if:
      // 1. They are authenticated.
      // 2. The document ID ({userId}) matches their authenticated UID.
      // 3. They are not trying to change their 'uid' or 'role' field.
      allow update: if request.auth.uid != null &&
                       request.auth.uid == userId &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.role == resource.data.role;

      // Disallow client-side deletion of user profiles.
      allow delete: if false;
    }

    match /sessions/{sessionId} {
      // Example: Allow authenticated users to read and write sessions.
      // Adjust with more specific rules based on coachId, clientId, roles etc. as needed.
      allow read, write: if request.auth.uid != null;
    }
  }
}
