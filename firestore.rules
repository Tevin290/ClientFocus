
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check email domain (will only be used by session rules or if you re-add restrictions later)
    function isHmPerformEmail() {
      return request.auth.token.email != null && request.auth.token.email.matches('.*@hmperform\\.com$');
    }

    // Users Collection
    match /users/{userId} {
      // Allow create:
      // 1. User must be authenticated.
      // 2. The UID in the document must match the authenticated user's UID.
      // 3. The email in the document must match the authenticated user's email.
      // No other restrictions on role or email domain for creation.
      allow create: if isAuthenticated() &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email;

      // Allow read: User can read their own profile.
      allow read: if isOwner(userId);

      // Allow update: User can update their own profile.
      // Prevent role change by the user themselves.
      allow update: if isOwner(userId) && request.resource.data.role == resource.data.role;

      // Generally, disallow delete for user profiles unless a specific admin function is built.
      allow delete: if false;
    }

    // Sessions Collection
    match /sessions/{sessionId} {
      function userRole() {
        // It's good practice to check if the user document exists and has a role
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
        return userDoc.exists && userDoc.data.role != null ? userDoc.data.role : '';
      }
      function isSessionCoach() {
        return userRole() == 'coach' && resource.data.coachId == request.auth.uid;
      }
      function isSessionClient() {
        return userRole() == 'client' && resource.data.clientId == request.auth.uid;
      }
      function isAdmin() {
        return userRole() == 'admin';
      }

      // Allow create:
      // - Authenticated coach can create a session.
      // - coachId in sessionData must match request.auth.uid.
      allow create: if isAuthenticated() && userRole() == 'coach' && request.resource.data.coachId == request.auth.uid;

      // Allow read:
      // - Admin can read all sessions.
      // - Coach can read sessions they created.
      // - Client can read sessions where they are the client.
      allow read: if isAuthenticated() && (isAdmin() || isSessionCoach() || isSessionClient());

      // Allow update:
      // - Admin can update sessions (e.g., status).
      // - Coach can update sessions they created (e.g., notes, summary if status is 'Logged').
      allow update: if isAuthenticated() && (
                    isAdmin() ||
                    (
                      isSessionCoach() &&
                      resource.data.status == 'Logged'
                    )
                  );
      // Allow delete: (Typically restricted)
      // - Admin might be able to delete.
      allow delete: if isAuthenticated() && isAdmin();
    }
  }
}
