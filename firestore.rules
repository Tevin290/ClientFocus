
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // Allow a user to create their own profile document if:
      // 1. They are authenticated.
      // 2. The document ID ({userId}) matches their authenticated UID.
      // 3. The role is 'client', OR
      //    The role is 'coach' or 'admin' AND their verified email is from @hmperform.com.
      // 4. The email in the document matches their authenticated email.
      // 5. The document contains all required fields: 'email', 'displayName', 'role', 'createdAt'.
      allow create: if request.auth != null
                    && userId == request.auth.uid
                    && (
                         request.resource.data.role == 'client'
                         || (
                              (request.resource.data.role in ['coach', 'admin'])
                              && request.auth.token.email.matches('.*@hmperform\\.com$')
                              && request.auth.token.email_verified == true
                         )
                       )
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.keys().hasAll(['email', 'displayName', 'role', 'createdAt']);

      // Allow a user to read their own profile document.
      allow read: if request.auth != null
                  && request.auth.uid == userId;

      // Allow a user to update their own profile document, but prevent changing critical fields.
      // 'uid' is not in the document, 'createdAt' should be immutable.
      // 'email' and 'role' changes should ideally be handled by more specific logic or admin actions.
      allow update: if request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.role == resource.data.role  // Role cannot be changed by user
                    && request.resource.data.email == resource.data.email // Email cannot be changed by user (reflects auth email)
                    && request.resource.data.createdAt == resource.data.createdAt; // createdAt immutable


      // Disallow client-side deletion of user profiles.
      allow delete: if false;
    }

    match /sessions/{sessionId} {
      // Basic rule: Authenticated users can read/write sessions.
      // TODO: Refine this based on coachId, clientId, and roles.
      allow read, write: if request.auth.uid != null;
    }

    match /appSettings/{settingsId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
                   && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
