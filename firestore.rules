rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ──────────────── USERS COLLECTION ──────────────── */
    match /users/{userId} {

      // ── CREATE ──
      //  • Authenticated user only
      //  • Doc ID must equal auth.uid
      //  • Field uid must equal auth.uid
      //  • Field email must match auth.token.email
      //  • Role rules:
      //      - 'client' → always allowed
      //      - 'coach' | 'admin' → only if email ends with @hmperform.com AND email is verified
      //  • Required keys: uid, email, displayName, role, createdAt
      allow create: if request.auth != null
                    && userId == request.auth.uid
                    && request.resource.data.uid == request.auth.uid
                    && request.resource.data.email == request.auth.token.email // Ensure email matches
                    && (
                         request.resource.data.role == 'client'
                         || (
                              (request.resource.data.role in ['coach', 'admin'])
                              && request.auth.token.email.matches('.*@hmperform\\.com$')
                              && request.auth.token.email_verified == true // Added explicit check
                         )
                       )
                    // Ensuring all keys are present, INCLUDING createdAt as per your successful Playground test.
                    && request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'role', 'createdAt']);

      // ── READ ──
      //  • User may read their own document
      allow read: if request.auth != null
                  && request.auth.uid == userId;

      // ── UPDATE ──
      //  • User may update their own document
      //  • Cannot change uid, role, email, or createdAt
      allow update: if request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.uid       == resource.data.uid
                    && request.resource.data.role      == resource.data.role
                    && request.resource.data.email     == resource.data.email
                    && request.resource.data.createdAt == resource.data.createdAt;

      // ── DELETE ──
      //  • Client-side deletion not allowed
      allow delete: if false;
    }

    /* ──────────────── SESSIONS COLLECTION ──────────────── */
    match /sessions/{sessionId} {
      allow read, write: if request.auth != null;
    }

    /* ──────────────── APP SETTINGS DOCS ──────────────── */
    match /appSettings/{settingsId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
                   && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}