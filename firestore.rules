
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for user profiles
    match /users/{userId} {
      // Allow a user to create their own profile document if:
      // 1. They are authenticated.
      // 2. The document ID ({userId}) matches their authenticated UID.
      // 3. The 'uid' field in the document data matches their authenticated UID.
      // 4. The 'email' field in the document data matches their authenticated email.
      // 5. The 'role' is 'client', OR
      //    The 'role' is 'coach' or 'admin' AND their email is from '@hmperform.com'.
      // 6. All required fields ('uid', 'email', 'displayName', 'role', 'createdAt') are present.
      allow create: if request.auth != null &&
                       userId == request.auth.uid &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       (
                         request.resource.data.role == 'client' ||
                         (
                           (request.resource.data.role == 'coach' || request.resource.data.role == 'admin') &&
                           request.auth.token.email.matches('.*@hmperform\\.com$')
                         )
                       ) &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'role', 'createdAt']);

      // Allow a user to read their own profile document.
      allow read: if request.auth != null &&
                     request.auth.uid == userId;

      // Allow a user to update their own profile document if:
      // - They are authenticated and own the document.
      // - They are not trying to change their UID or role (these should be admin-only or server-side).
      // - You can add more specific field-level write restrictions here if needed.
      allow update: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.uid == resource.data.uid && // Cannot change uid
                       request.resource.data.role == resource.data.role;  // Cannot change role via this rule

      // Generally, disallow client-side deletion of user profiles.
      allow delete: if false;
    }

    // Rules for sessions
    match /sessions/{sessionId} {
      // Example: Allow authenticated users to read and write sessions.
      // This should be refined based on roles (e.g., coach can write for their clients, client can read their sessions).
      allow read, write: if request.auth.uid != null;
    }

    // Add other collection rules below
  }
}
