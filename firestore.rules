rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    // Returns true if the requesting user is the owner of the resource.
    // Use this by passing the UID from the document, e.g., isOwner(resource.data.uid).
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Returns true if the requesting user has the 'admin' role in their user profile.
    // This requires a read of the user's own profile document.
    function isAdmin() {
      // Check if the user is authenticated first.
      // Then, get their user document from the 'users' collection.
      // The path is constructed dynamically using the requesting user's UID.
      // Check if the 'role' field in their document data is 'admin'.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // =================================
    // Users Collection Rules
    // =================================
    match /users/{userId} {

      // READ: Any authenticated user can read any other user's profile.
      // This is necessary for features like an admin fetching a list of all coaches.
      allow read: if request.auth != null;

      // CREATE: A user can create their own document, OR an admin can create any user document.
      // This allows both regular signup and admin actions like creating dummy client users.
      // We check that the data being written has a 'uid' field that matches the document ID.
      allow create: if (isOwner(userId) && request.resource.data.uid == userId)
                    || isAdmin();

      // UPDATE: A user can update their own document, OR an admin can update any user document.
      // A non-admin user is NOT allowed to change their own role.
      allow update: if (isOwner(userId) && request.resource.data.role == resource.data.role)
                    || isAdmin();
      
      // DELETE: Only an admin can delete a user document.
      allow delete: if isAdmin();
    }

    // =================================
    // Sessions Collection Rules
    // =================================
    match /sessions/{sessionId} {

      // READ: Any authenticated user can read any session.
      // This can be tightened later if needed (e.g., only coach/client/admin can read).
      // For now, this supports admin review, coach dashboard, and client history views.
      allow read: if request.auth != null;

      // CREATE: The session can be created by the coach assigned to it, OR by an admin.
      // This covers a coach logging a session and an admin creating dummy data.
      // Use `request.resource.data` because the document doesn't exist yet.
      allow create: if (isOwner(request.resource.data.coachId))
                    || isAdmin();

      // UPDATE: The session can be updated by the coach who owns it, OR by an admin.
      // Use `resource.data` because the document already exists.
      allow update: if (isOwner(resource.data.coachId))
                    || isAdmin();

      // DELETE: Only an admin can delete a session document.
      allow delete: if isAdmin();
    }
  }
}
